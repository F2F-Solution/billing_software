<?phpif (!defined('BASEPATH'))    exit('No direct script access allowed');/** * Attendance_model * * This model represents attendance. It operates the following tables: * - education, * * @package	Payroll * @author	Vathsala */class Attendance_model extends CI_Model {    private $table_name = 'attendance';    private $associate = 'attendance_updated';    private $break_table = 'break_table';    function __construct() {        parent::__construct();    }    /**     * Get all user attendance     *     * @return	array     */    function check_manual_attendance() {        $this->db->where('key', 'manual_attendance_entry');        $get_options_list = $this->db->get('options')->result_array();        // print_r($get_options_list);exit;        if (count($get_options_list) > 0) {            if ($get_options_list[0]['value'] == 1) {                return 1;            }if ($get_options_list[0]['value'] == 0) {                return 0;            }        } else {            return 1;        }    }    function get_all_users_attendances() {        $query = $this->db->get($this->table_name);        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    /**     * Get user attendance by id (user id)     *     * @param	int     * @return	array     */    function get_user_attendance_by_user_id($user_id) {        $this->db->where('user_id', $user_id);        $query = $this->db->get($this->table_name);        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    function get_all_datamigration() {        $this->db->order_by('id', 'desc');        $logs = $this->db->get('data_migration')->result_array();        return $logs;    }    /*     * Get user attendance by attendance id (attendance id)     * @param	int     * @return	array     */    function last_migration_log() {        $this->db->order_by('id', 'desc');        $this->db->where('last_run_log_datetime !=', ' ');        $get_log_history = $this->db->get('data_migration')->result_array();        if (count($get_log_history) > 0) {            return $get_log_history[0]['last_run_log_datetime'];        } else {            $this->db->order_by('id', 'desc');            $atten_log = $this->db->get('attendance')->result_array();            if (count($atten_log) > 0) {                return $atten_log[0]['created'];            } else {                return date('Y-m-d h:i:s');            }        }    }    function check_any_data_available($logdata_dates, $last_log_datetime) {        foreach ($logdata_dates as $key => $log_dates) {            $explode_log_dates = explode('-', $log_dates);            $month = $explode_log_dates[1];            $year = $explode_log_dates[0];            $table = 'devicelogs_' . $month . '_' . $year;            $table = 'devicelogs_12_2018';            //$data= $this->load->database('epushserverdb', TRUE);            /* $this->epushserverdb_db = $this->load->database('epushserverdb', true);              $data= $this->epushserverdb_db->get('biotype')->result_array();              //check table exists              if ($this->epushserverdb_db->table_exists($table)) {              $this->epushserverdb_db->select('UserId,LogDate,Direction,DeviceId,DeviceLogId,hrapp_syncstatus');              $this->epushserverdb_db->where('DeviceId', 3);              $this->epushserverdb_db->where('hrapp_syncstatus', NULL);              $this->epushserverdb_db->where('DATE(' . $table . '.LogDate)', $log_dates);              //$this->db->where('UserId', $user_data['id']);              $this->epushserverdb_db->where("DATE_FORMAT(" . $table . ".LogDate,'%Y-%m-%d %H:%i:%s') > '" . $last_log_datetime . "'");              $this->epushserverdb_db->where("DATE_FORMAT(" . $table . ".LogDate,'%Y-%m-%d %H:%i:%s') < '" . date('Y-m-d H:i:s') . "'");              $get_hostorys = $this->epushserverdb_db->get($table)->result_array();              if (count($get_hostorys) > 0) {              foreach ($get_hostorys as $key1 => $history_list) {              $get_hostorys[$key1]['table_name'] = $table;              }              }              $push_data[$key] = $get_hostorys;              }             */            //check table exists            if ($this->db->table_exists($table)) {                $this->db->select('UserId,LogDate,Direction,DeviceId,DeviceLogId,hrapp_syncstatus');                $this->db->where('DeviceId', 3);                $this->db->where('hrapp_syncstatus', NULL);                $this->db->where('DATE(' . $table . '.LogDate)', $log_dates);                //$this->db->where('UserId', $user_data['id']);                $this->db->where("DATE_FORMAT(" . $table . ".LogDate,'%Y-%m-%d %H:%i:%s') > '" . $last_log_datetime . "'");                $this->db->where("DATE_FORMAT(" . $table . ".LogDate,'%Y-%m-%d %H:%i:%s') < '" . date('Y-m-d H:i:s') . "'");                $get_hostorys = $this->db->get($table)->result_array();                if (count($get_hostorys) > 0) {                    foreach ($get_hostorys as $key1 => $history_list) {                        $get_hostorys[$key1]['table_name'] = $table;                    }                }                $push_data[$key] = $get_hostorys;            }        }        //get all push data in single array        $singleArray = [];        foreach ($push_data as $childArray) {            foreach ($childArray as $value) {                $singleArray[] = $value;            }        }        return $singleArray;    }    function get_push_server_datas($logdata_dates, $last_log_datetime, $user_id) {        foreach ($logdata_dates as $key => $log_dates) {            $explode_log_dates = explode('-', $log_dates);            $month = $explode_log_dates[1];            $year = $explode_log_dates[0];            $table = 'devicelogs_' . $month . '_' . $year;            /* $this->load->database('epushserverdb', TRUE);              $this->epushserverdb_db = $this->load->database('epushserverdb', true);              //check table exists              if ($this->epushserverdb_db->table_exists($table)) {              $this->epushserverdb_db->select('UserId,LogDate,Direction,DeviceId,DeviceLogId,hrapp_syncstatus');              $this->epushserverdb_db->where('DeviceId', 3);              $this->epushserverdb_db->where('hrapp_syncstatus', NULL);              $this->epushserverdb_db->where('DATE(' . $table . '.LogDate)', $log_dates);              $this->epushserverdb_db->where('UserId', $user_id);              $this->epushserverdb_db->where("DATE_FORMAT(" . $table . ".LogDate,'%Y-%m-%d %H:%i:%s') > '" . $last_log_datetime . "'");              $this->epushserverdb_db->where("DATE_FORMAT(" . $table . ".LogDate,'%Y-%m-%d %H:%i:%s') < '" . date('Y-m-d H:i:s') . "'");              $get_hostorys = $this->epushserverdb_db->get($table)->result_array();              if (count($get_hostorys) > 0) {              foreach ($get_hostorys as $key1 => $history_list) {              $get_hostorys[$key1]['table_name'] = $table;              }              }              $push_data[$key] = $get_hostorys;              } */            //check table exists            if ($this->db->table_exists($table)) {                $this->db->select('UserId,LogDate,Direction,DeviceId,DeviceLogId,hrapp_syncstatus');                $this->db->where('DeviceId', 3);                $this->db->where('hrapp_syncstatus', NULL);                $this->db->where('DATE(' . $table . '.LogDate)', $log_dates);                $this->db->where('UserId', $user_id);                $this->db->where("DATE_FORMAT(" . $table . ".LogDate,'%Y-%m-%d %H:%i:%s') > '" . $last_log_datetime . "'");                $this->db->where("DATE_FORMAT(" . $table . ".LogDate,'%Y-%m-%d %H:%i:%s') < '" . date('Y-m-d H:i:s') . "'");                $get_hostorys = $this->db->get($table)->result_array();                if (count($get_hostorys) > 0) {                    foreach ($get_hostorys as $key1 => $history_list) {                        $get_hostorys[$key1]['table_name'] = $table;                    }                }                $push_data[$key] = $get_hostorys;            }        }        //get all push data in single array        $singleArray = [];        foreach ($push_data as $childArray) {            foreach ($childArray as $value) {                $singleArray[] = $value;            }        }        return $singleArray;    }    function user_last_logs($user_id) {        $this->db->order_by('id', 'desc');        $this->db->where('user_id', $user_id);        $this->db->where('out', NULL);        $get_user_logs_out = $this->db->get('attendance')->result_array();        if (count($get_user_logs_out) > 0) {            $datetime = $get_user_logs_out[0]['created'];            $datetime_ex = explode(' ', $datetime);            $date = $datetime_ex[0];            $datetime = $datetime_ex[0] . " " . $get_user_logs_out[0]['in'];            $this->db->order_by('id', 'desc');            $this->db->where('attendance_id', $get_user_logs_out[0]['id']);            $check_break = $this->db->get('break_table')->result_array();            if (count($check_break) > 0) {                if ($check_break[0]['out_time'] != "")                    $date_time = $date . " " . $check_break[0]['out_time'];                else                    $date_time = $date . " " . $check_break[0]['in_time'];            }else {                $date_time = $datetime;            }        } else {            $this->db->order_by('id', 'desc');            $this->db->where('user_id', $user_id);            $get_user_logs_in = $this->db->get('attendance')->result_array();            if (count($get_user_logs_in) > 0) {                $datetime = $get_user_logs_in[0]['created'];                $datetime_ex = explode(' ', $datetime);                $date = $datetime_ex[0];                $datetime = $datetime_ex[0] . " " . $get_user_logs_in[0]['out'];                $this->db->order_by('id', 'desc');                $this->db->where('attendance_id', $get_user_logs_in[0]['id']);                $check_break = $this->db->get('break_table')->result_array();                if (count($check_break) > 0) {                    if ($check_break[0]['out_time'] != "")                        $date_time = $date . " " . $check_break[0]['out_time'];                    else                        $date_time = $date . " " . $check_break[0]['in_time'];                }else {                    $date_time = $datetime;                }            }        }        return $date_time;    }    function get_push_logs($last_log_datetime) {        //Last log date        $explode_last_log_date = explode(' ', $last_log_datetime);        $last_log_date = $explode_last_log_date[0];        $last_log_time = $explode_last_log_date[1];        //current time        $current_datetime = date('Y-m-d H:i:s');        $explode_current_datetime = explode(' ', $current_datetime);        $current_date = $explode_current_datetime[0];        $current_time = $explode_current_datetime[1];        //migration start data        $migration_data = [            "log_datetime" => $current_datetime,            "log_date" => $current_date,            "start_time" => $current_time,            "status" => "in_progress"        ];        while (strtotime($last_log_date) <= strtotime($current_date)) {            $logdata_dates[] = $last_log_date;            $last_log_date = date("Y-m-d", strtotime("+1 days", strtotime($last_log_date)));        }        //check_data_exists_in_push_server        $check_data_available = $this->check_any_data_available($logdata_dates, $last_log_datetime);        if (count($check_data_available) == 0) {            return 0;        }        $get_hostorys = "";        $push_data = "";        $this->load->database('default', TRUE);        $this->db->select('users.id,users.username');        $this->db->where('status', 1);        $user_details = $this->db->get('users');        if ($user_details->num_rows() > 0) {            $user_details = $user_details->result_array();            foreach ($user_details as $key => $user_data) {                $get_logs_date = $this->user_last_logs($user_data['id']);                if (empty($get_logs_date))                    $get_logs_date = $last_log_datetime;                //get_push_server_datas                $singleArray = $this->get_push_server_datas($logdata_dates, $get_logs_date, $user_data['id']);                $this->load->database('default', TRUE);                if (count($singleArray) > 0) {                    $this->db->order_by('id', 'desc');                    $check_migration_data = $this->db->get('data_migration')->result_array();                    $datas = $check_migration_data[0]['last_run_log_datetime'];                    if ($datas != "") {                        $this->db->insert('data_migration', $migration_data);                        $insert_migrate_id = $this->db->insert_id();                    }                    foreach ($singleArray as $key_data => $results) {                        $user_atten_date = date('Y-m-d', strtotime($results['LogDate']));                        $this->db->select('*');                        $this->db->where('user_id', $results['UserId']);                        $this->db->where('DATE(created)', $user_atten_date);                        $alreadyAttendance = $this->db->get('attendance')->result_array();                        if (count($alreadyAttendance) == 0) {                            if ($results['Direction'] == 'in') {                                $insert_atten_data = [                                    "user_id" => $results['UserId'],                                    "in" => date("H:i", strtotime($results['LogDate'])),                                    "created" => $results['LogDate'],                                ];                                //Insert attandance                                $this->db->insert('attendance', $insert_atten_data);                                $insert_attenance_id = $this->db->insert_id();                                $update_data = array('hrapp_syncstatus' => 1);                                /* $this->load->database('epushserverdb', TRUE);                                  $this->epushserverdb_db = $this->load->database('epushserverdb', true);                                  $this->epushserverdb_db->where('LogDate', $results['LogDate']);                                  $this->epushserverdb_db->where('UserId', $results['UserId']);                                  $this->epushserverdb_db->where('DeviceLogId', $results['DeviceLogId']);                                  $this->epushserverdb_db->update($results['table_name'], $update_data); */                                $this->db->where('LogDate', $results['LogDate']);                                $this->db->where('UserId', $results['UserId']);                                $this->db->where('DeviceLogId', $results['DeviceLogId']);                                $this->db->update($results['table_name'], $update_data);                            }                        } else {                            $this->load->database('default', TRUE);                            $this->db->select('*');                            $this->db->where('DATE(created)', $user_atten_date);                            $this->db->where('user_id', $results['UserId']);                            $query = $this->db->get('attendance');                            $attendance_data = $query->result_array();                            if (!empty($attendance_data[0]['out'])) {                                $out_time = $attendance_data[0]['out'];                                if ($results['Direction'] == 'in') {                                    $in_time = date('H:i', strtotime($results['LogDate']));                                    $this->db->where('break_table.attendance_id', $attendance_data[0]['id']);                                    $this->db->where('break_table.in_time', $out_time);                                    $this->db->where('break_table.out_time', $in_time);                                    $this->db->where('break_table.type', 'break');                                    $attendance_check = $this->db->get('break_table')->result_array();                                    if (count($attendance_check) == 0) {                                        $insert_break_data = array(                                            'attendance_id' => $attendance_data[0]['id'],                                            'in_time' => $out_time,                                            'out_time' => $in_time,                                            'type' => 'break'                                        );                                        $this->db->insert('break_table', $insert_break_data);                                        $insert_break_id = $this->db->insert_id();                                    } else {                                        $insert_break_id = $attendance_check[0]['id'];                                    }                                    // Update Attendance                                    $this->db->where('attendance.id', $attendance_data[0]['id']);                                    $update_atten_data = array(                                        'out' => NULL                                    );                                    $update_atten = $this->db->update('attendance', $update_atten_data);                                } else {                                    $this->db->where('attendance.id', $attendance_data[0]['id']);                                    $update_atten_data = array(                                        'out' => NULL                                    );                                    $update_atten = $this->db->update('attendance', $update_atten_data);                                }                            } else {                                $this->load->database('default', TRUE);                                if ($results['Direction'] == 'out') {                                    $out_time = date('H:i', strtotime($results['LogDate']));                                    // Update Attendance                                    $this->db->where('attendance.id', $attendance_data[0]['id']);                                    $update_atten_data = array(                                        'out' => $out_time                                    );                                    $update_atten = $this->db->update('attendance', $update_atten_data);                                }                            }                        }                    }                }            }            $this->load->database('default', TRUE);            if ($insert_migrate_id) {                $explode_current_datetime = explode(' ', date('Y-m-d H:i:s'));                $current_date = $explode_current_datetime[0];                $current_time = $explode_current_datetime[1];                $last_log_dates = $this->check_last_logs();                if (empty($last_log_dates)) {                    return date('Y-m-d h:i:s');                }                $this->load->database('default', TRUE);                $update_data = [                    "end_time" => $current_time,                    "status" => "completed",                    "last_run_log_datetime" => $last_log_dates];                $this->db->where('id', $insert_migrate_id);                $this->db->update('data_migration', $update_data);                return $update_data;            } else {                return 0;            }        }    }    function check_last_logs() {        // $this->load->database('epushserverdb', TRUE);        //  $this->epushserverdb_db = $this->load->database('epushserverdb', true);        $month = date('m');        $year = date('Y');        $table = 'devicelogs_' . $month . '_' . $year;        if ($this->db->table_exists($table)) {            $this->db->order_by('DeviceLogId', 'desc');            $device_log = $this->db->get($table)->result_array();            if (count($device_log) > 0) {                return $device_log[0]['LogDate'];            }        } else {            $this->load->database('default', TRUE);            $this->db->order_by('id', 'desc');            $last_atten = $this->db->get('attendance')->result_array();            return $last_atten[0]['created'];        }    }    function get_attendance_by_id($attendance_id) {        $this->db->select($this->table_name . '.*');        $this->db->select('DATE_FORMAT(' . $this->table_name . '.created,"%d-%m-%Y") as attendance_date', FALSE);        $this->db->where('id', $attendance_id);        $query = $this->db->get($this->table_name);        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    /**     * Insert new user attendance     *     * @param	array     * @param	bool     * @return	id     */    function insert_attendance($data) {        if ($this->db->insert($this->table_name, $data)) {            $att_id = $this->db->insert_id();            return $att_id;        }        return false;    }    /**     * Update user attendance by user id     *     * @param	array     * @param	int     * @return	bool     */    function update_user_attendance($user_id, $data) {        $this->db->where('user_id', $user_id);        if ($this->db->update($this->table_name, $data)) {            return true;        }        return false;    }    /**     * insert updation for attendance in  attendance updated table     *     * @param	array     * @param	int     * @return	bool     */    function insert_updation_for_att_id($data) {        if ($this->db->insert($this->associate, $data)) {            $att_id = $this->db->insert_id();            return $att_id;        }        return false;    }    /**     * Update  attendance by  id     *     * @param	array     * @param	int     * @return	bool     */    function update_attendance($att_id, $data) {        $this->db->where('id', $att_id);        if ($this->db->update($this->table_name, $data)) {            return true;        }        return false;    }    /**     * Delete user attendance by user id     *     * @param	int     * @return	bool     */    function delete_user_attendance($user_id) {        $this->db->where('user_id', $user_id);        $this->db->delete($this->table_name);        if ($this->db->affected_rows() > 0) {            return true;        }        return false;    }    /**     * Delete user attendance by  id     *     * @param	int     * @return	bool     */    function delete_attendance_by_id($att_id) {        $this->db->where('id', $att_id);        $this->db->delete($this->table_name);        if ($this->db->affected_rows() > 0) {            return true;        }        return false;    }    function delete_updation_for_att_id($attendance_id) {        $this->db->where('attendance_id', $attendance_id);        $this->db->delete($this->associate);        if ($this->db->affected_rows() > 0) {            return true;        }        return false;    }    function get_attendance_by_month_year_and_user_id($year, $month, $user_id) {        $this->db->select('*');        $this->db->select('DATE_FORMAT(' . $this->table_name . '.created,"%d-%m-%Y") as attendance_date', FALSE);        $this->db->select('DATE_FORMAT(' . $this->table_name . '.created,"%d") as key_date', FALSE);        $this->db->where('YEAR(created)', $year);        if (gettype($month) == "array")            $this->db->where_in('MONTH(created)', $month);        else            $this->db->where('MONTH(created)', $month);        $this->db->where('user_id', $user_id);        $query = $this->db->get($this->table_name);        //echo $this->db->last_query();        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    function get_attendance_by_between_dates($user_id, $date1, $date2) {        $this->db->select('*');        $this->db->select('DATE_FORMAT(' . $this->table_name . '.created,"%d-%m-%Y") as attendance_date', FALSE);        $this->db->select('DATE_FORMAT(' . $this->table_name . '.created,"%d") as key_date', FALSE);        $this->db->where('DATE(created) >="' . $date1 . '"');        $this->db->where('DATE(created) <="' . $date2 . '"');        $this->db->where('user_id', $user_id);        $query = $this->db->get($this->table_name);        //  echo $this->db->last_query();        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    function insert_break_values($data) {        if ($this->db->insert($this->break_table, $data)) {            $br_id = $this->db->insert_id();            return $br_id;        }        return false;    }    function update_break_values($break_id, $data) {        $this->db->where('id', $break_id);        if ($this->db->update($this->break_table, $data)) {            return true;        }        return false;    }    function get_break_details_by_attendance_id($att_id) {        $this->db->where('attendance_id', $att_id);        $query = $this->db->get($this->break_table);        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    function delete_break_details_by_att_id($att_id) {        $this->db->where('attendance_id', $att_id);        $this->db->delete($this->break_table);        if ($this->db->affected_rows() > 0) {            return true;        }        return false;    }    function get_user_attendance_id_by_month_year($year, $month, $user_id) {        $this->db->select('id,in,out');        $this->db->select('DATE_FORMAT(' . $this->table_name . '.created,"%d") as date', FALSE);        $this->db->where('YEAR(created)', $year);        $this->db->where('MONTH(created)', $month);        $this->db->where('user_id', $user_id);        $this->db->order_by('created');        $query = $this->db->get($this->table_name);        //echo $this->db->last_query();        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    /* Get number of users present for admin */    function get_number_of_users_present() {        $this->db->select('count(*) as count');        $cur_date = date('Y-m-d');        //$cur_date = '2014-02-01';        $this->db->where('DATE(created)', $cur_date);        $query = $this->db->get($this->table_name);        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    /* Get number of users present for admin by filter */    function get_number_of_users_present_by_filter($filter) {        $this->db->select('count(*) as count');        $cur_date = date('Y-m-d');        if (isset($filter) && !empty($filter)) {            if (isset($filter["department"]) && !empty($filter["department"])) {                $this->db->where_in('department.id', $filter['department']);            }            if (isset($filter["designation"]) && !empty($filter["designation"])) {                $this->db->where_in('designation.id', $filter['designation']);            }            if (isset($filter["users"]) && !empty($filter["users"])) {                $this->db->where_in($this->table_name . '.id', $filter["users"]);            }            if (isset($filter['field']) && $filter['field'] != NULL && isset($filter["value"]) && $filter["value"] != NULL) {                if ($filter['field'] == "gender")                    $where = 'users.' . $filter['field'] . " = '" . $filter["value"] . "'";                else                    $where = 'users.' . $filter['field'] . ' LIKE "%' . $filter["value"] . '%"';                $this->db->where($where);            }        }        $this->db->where('DATE(' . $this->table_name . '.created)', $cur_date);        $this->db->where('user_history.date <=', $cur_date);        $this->db->where('user_history.type =', "doj");        $this->db->join('users', 'users.id=' . $this->table_name . '.user_id', 'left');        $this->db->join('user_department', 'user_department.user_id=' . $this->table_name . '.user_id', 'left');        $this->db->join('user_history', 'user_history.user_id=' . $this->table_name . '.user_id', 'left');        $this->db->join('department', 'department.id=user_department.department', 'left');        $this->db->join('designation', 'designation.id=user_department.designation', 'left');        $query = $this->db->get($this->table_name);        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    /* Get number of users present for user */    function get_num_of_users_present($user_id_list) {        $this->db->select('count(*) as count');        $cur_date = date('Y-m-d');        $this->db->where_in('user_id', $user_id_list);        $this->db->where('DATE(created)', $cur_date);        $query = $this->db->get($this->table_name);        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    /**     * Get user attendance by id (user id)     *     * @param	int     * @return	array     */    function get_user_attendance_by_userid_and_date($user_id, $date) {        $this->db->where('DATE(created)', $date);        $this->db->where('user_id', $user_id);        $query = $this->db->get($this->table_name);        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    function get_user_attendance_by_date($date) {        $this->db->where('DATE(created)', $date);        $query = $this->db->get($this->table_name);        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    function get_break_details_by_attendance_and_type($att_id, $type) {        $this->db->select('*');        //	$this->db->select('DATE(created) as attendance_date');        $this->db->where('attendance_id', $att_id);        $this->db->where('type', $type);        $query = $this->db->get($this->break_table);        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    //Get all attendance without having out time    function get_all_attendances_without_outtime($user_id = NULL) {        $this->db->select($this->table_name . '.*');        $this->db->select('DATE(attendance.created) as attendance_date');        $this->db->select('DATE_FORMAT(attendance.created,"%d-%m-%Y") as cu_date', FALSE);        $this->db->select("CONCAT_WS(' ', users.first_name, users.last_name ) AS name");        $this->db->join('users', 'users.id=' . $this->table_name . '.user_id', 'left');        $this->db->where($this->table_name . '.out', NULL);        $this->db->where($this->table_name . '.in IS NOT NULL');        $this->db->where('DATE(' . $this->table_name . '.created)!=', date('Y-m-d'));        if ($user_id != NULL)            $this->db->where($this->table_name . '.user_id', $user_id);        $query = $this->db->get($this->table_name);        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    /*     * Get user attendance by attendance id (attendance id)     * @param	int     * @return	array     */    function get_attendance_by_id_without_outtime($attendance_id) {        $this->db->select($this->table_name . '.*');        $this->db->select("CONCAT_WS(' ', users.first_name, users.last_name ) AS name");        $this->db->select('DATE_FORMAT(' . $this->table_name . '.created,"%d-%m-%Y") as attendance_date', FALSE);        $this->db->where($this->table_name . '.id', $attendance_id);        $this->db->join('users', 'users.id=' . $this->table_name . '.user_id', 'left');        $query = $this->db->get($this->table_name);        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    function get_emp_all_logs_by_day($user_id, $created_date) {        $all_logs = array();        $this->db->select('id as attendance_id');        $this->db->where('DATE(' . $this->table_name . '.created)', date('Y-m-d', strtotime($created_date)));        $this->db->where('user_id', $user_id);        $query = $this->db->get($this->table_name)->row_array();        if (!empty($query['attendance_id'])) {            $this->db->select('*');            $this->db->where('break_table.attendance_id', $query['attendance_id']);            $all_logs = $this->db->get('break_table')->result_array();        }        return $all_logs;    }    function get_late_coming_users_list($dates) {        $late_coming_users = [];        $office_time_details = $this->get_office_time();        $over_time = $office_time_details['over_time'];        $office_late_time = $office_time_details['late_coming_threshold'];        foreach ($dates as $date_data) {            $users = [];            $this->db->where('options.key', 'attendance_threshold');            $threshold_value = $this->db->get('options')->result_array();            $threshold = 0;            if ($threshold_value != "") {                $threshold = $threshold_value[0]['value'];            }            $get_office_time = $this->get_office_time();            $work_start = $get_office_time['in_time'];            $work_end = $get_office_time['out_time'];            // $over_time="20:00:00";//            if ($threshold != 0) {//                $work_start = strtotime($work_start);//                $work_start = date("H:i:s", strtotime('+' . $threshold . ' minutes', $work_start));//            }            $this->db->select('users.id,users.employee_id,users.username,shift.name as shift_name,attendance.id as atten_id,attendance.in,attendance.out,attendance.created');            $this->db->join('user_shift', 'user_shift.user_id=users.id', 'left');            $this->db->join('shift', 'shift.id=user_shift.shift_id', 'left');            $this->db->join('attendance', 'attendance.user_id=users.id', 'left');            $this->db->where('DATE(attendance.created)=', $date_data);            $this->db->where('users.status', 1);            $this->db->where('attendance.in >', $office_late_time);            $this->db->group_by('users.id');            $users = $this->db->get('users')->result_array();            $explode_date = explode('-', $date_data);            $month = $explode_date[1];            $year = $explode_date[0];            $table = 'devicelogs_' . $month . '_' . $year;            foreach ($users as $key => $user_list) {                $users[$key]['in'] = $this->explode_time($user_list['in']);                $users[$key]['out'] = $this->explode_time($user_list['out']);                //   $users[$key]['status'] = "present";                $users[$key]['ot'] = "00:00";                $users[$key]['late_by'] = "00:00";                if ($user_list['out'] > $over_time) {                    $ot = $this->time_difference($over_time, $user_list['out']);                    $users[$key]['ot'] = $this->explode_time($ot);                }                //late_by                $users[$key]['late_by'] = $this->explode_time($this->time_difference($user_list['in'], $office_late_time));                //punch records                $this->db->select('UserId,LogDate,Direction');                $this->db->where('DATE(' . $table . '.LogDate)', $date_data);                $this->db->where('UserId', $user_list['id']);                $device_log = $this->db->get($table)->result_array();                $full_logs = "";                $log_details = "";                $log_details_data = "";                if ($device_log != "") {                    foreach ($device_log as $d_key => $logs) {                        $keyss = $d_key + 1;                        $direction = $logs['Direction'];                        $log_time_explode = explode(' ', $logs['LogDate']);                        $time = $this->explode_time($log_time_explode[1]);                        $log_details_data = $time . ":" . $direction;                        if ($keyss % 5 == "0" && $keyss != 0) {                            $log_details_data = $time . ":" . $direction . '<br>';                        }                        $log_details[] = $log_details_data;                    }                    $full_logs = implode(',', $log_details);                }                $users[$key]['full_logs_details'] = $device_log;                $users[$key]['full_logs'] = $full_logs;                $this->load->database('default', TRUE);                $this->db = $this->load->database('default', true);                $total_atten_time = "";                //total_duration                $total_atten_time = $this->time_difference($user_list['in'], $user_list['out']);                $this->db->where('break_table.attendance_id', $user_list['atten_id']);                if ($user_list['out'] != "")                    $this->db->where('break_table.in_time !=', $user_list['out']);                $break_details = $this->db->get('break_table')->result_array();                $over_all_break = "";                $over_break_time = "";                if ($break_details != "") {                    foreach ($break_details as $key1 => $break_data) {                        $over_break_time[] = $this->time_difference($break_data['in_time'], $break_data['out_time']);                    }                    $over_all_break = $this->sum_multi_time($over_break_time);                    $over_total_atten_time = $this->time_difference($total_atten_time, $over_all_break);                    $users[$key]['over_break_time1'] = $break_details;                    $users[$key]['over_break_time2'] = $over_break_time;                    $users[$key]['atten_hours'] = $this->explode_time($total_atten_time);                    $users[$key]['over_break_time'] = $this->explode_time($over_all_break);                    $users[$key]['total_duration'] = $this->explode_time($over_total_atten_time);                } else {                    $users[$key]['atten_hours'] = $this->explode_time($total_atten_time);                    $users[$key]['over_break_time'] = "-";                    $users[$key]['total_duration'] = $this->explode_time($total_atten_time);                }                $over_all_duration = "00:00:00";                if ($ot != "-") {                    $over_all_duration = $this->sum_the_time($ot, $over_total_atten_time);                    $users[$key]['over_all_duration'] = $this->explode_time($over_all_duration);                }                $check_attend = $this->check_attendance($users[$key]['in'], $over_total_atten_time);                $users[$key]['status'] = $check_attend;            }            $late_coming_users[$date_data]['users'] = $users;            if (count($users) == 0) {                $this->db->where("holiday_from <=", $date_data);                $this->db->where("holiday_to >=", $date_data);                $holidays = $this->db->get('public_holidays')->result_array();                if (count($holidays) > 0) {                    $late_coming_users[$date_data]['holidays'] = $holidays[0]['reason'] . "  Holiday";                } else {                    $week_off_holiday = $this->week_end_holiday($date_data);                    $late_coming_users[$date_data]['holidays'] = $week_off_holiday;                }            }        }        return $late_coming_users;    }    function get_early_going_users_list($dates) {        $early_going_users = [];        $office_time_details = $this->get_office_time();        $over_time = $office_time_details['over_time'];        $office_early_time = $office_time_details['early_going_threshold'];        foreach ($dates as $date_data) {            $users = [];            $this->db->where('options.key', 'attendance_threshold');            $threshold_value = $this->db->get('options')->result_array();            $threshold = 0;            if ($threshold_value != "") {                $threshold = $threshold_value[0]['value'];            }            $get_office_time = $this->get_office_time();            $work_start = $get_office_time['in_time'];            $work_end = $get_office_time['out_time'];            //$over_time="20:00:00";//            if ($threshold != "") {//                $work_start = strtotime($work_start);//                $work_start = date("H:i:s", strtotime('+' . $threshold . ' minutes', $work_start));//            }            $this->db->select('users.id,users.employee_id,users.username,shift.name as shift_name,attendance.id as atten_id,attendance.in,attendance.out,attendance.created');            $this->db->join('user_shift', 'user_shift.user_id=users.id', 'left');            $this->db->join('shift', 'shift.id=user_shift.shift_id', 'left');            $this->db->join('attendance', 'attendance.user_id=users.id', 'left');            $this->db->where('DATE(attendance.created)=', $date_data);            $this->db->where('users.status', 1);            $this->db->where('attendance.out <', $office_early_time);            $this->db->group_by('users.id');            $users = $this->db->get('users')->result_array();//echo "<pre>";print_r($users);exit;            $explode_date = explode('-', $date_data);            $month = $explode_date[1];            $year = $explode_date[0];            $table = 'devicelogs_' . $month . '_' . $year;            foreach ($users as $key => $user_list) {                $users[$key]['in'] = $this->explode_time($user_list['in']);                $users[$key]['out'] = $this->explode_time($user_list['out']);                $users[$key]['status'] = "present";                $users[$key]['ot'] = "00:00";                $users[$key]['early_going'] = "00:00";                if ($user_list['out'] > $over_time) {                    $ot = $this->time_difference($over_time, $user_list['out']);                    $users[$key]['ot'] = $ot;                }                //early_going                $users[$key]['early_going'] = $this->explode_time($this->time_difference($office_early_time, $user_list['out']));                //punch records                /*  $this->load->database('epushserverdb', TRUE);                  $this->epushserverdb_db = $this->load->database('epushserverdb', true);                  $this->epushserverdb_db->select('UserId,LogDate,Direction');                  $this->epushserverdb_db->where('DATE('.$table.'.LogDate)', $date_data);                  //$this->db->where('DATE('.$table.'.LogDate)=', $date_data);                  $this->epushserverdb_db->where($table . '.UserId', $user_list['id']); // example-36                  $device_log = $this->epushserverdb_db->get($table)->result_array(); */                $this->db->select('UserId,LogDate,Direction');                $this->db->where('DATE(' . $table . '.LogDate)', $date_data);                $this->db->where('UserId', $user_list['id']);                $device_log = $this->db->get($table)->result_array();                $full_logs = "";                $log_details = "";                $log_details_data = "";                if ($device_log != "") {                    foreach ($device_log as $d_key => $logs) {                        $keyss = $d_key + 1;                        $direction = $logs['Direction'];                        $log_time_explode = explode(' ', $logs['LogDate']);                        $time = $this->explode_time($log_time_explode[1]);                        $log_details_data = $time . ":" . $direction;                        if ($keyss % 5 == "0" && $keyss != 0) {                            $log_details_data = $time . ":" . $direction . '<br>';                        }                        $log_details[] = $log_details_data;                    }                    $full_logs = implode(',', $log_details);                }                $users[$key]['full_logs_details'] = $device_log;                $users[$key]['full_logs'] = $full_logs;                $total_atten_time = "";                //total_duration                $this->load->database('default', TRUE);                $this->db = $this->load->database('default', true);                $total_atten_time = $this->time_difference($user_list['in'], $user_list['out']);                $this->db->where('break_table.attendance_id', $user_list['atten_id']);                if ($user_list['out'] != "")                    $this->db->where('break_table.in_time !=', $user_list['out']);                $break_details = $this->db->get('break_table')->result_array();                $over_all_break = "";                $over_break_time = "";                if ($break_details != "") {                    foreach ($break_details as $key1 => $break_data) {                        $over_break_time[] = $this->time_difference($break_data['in_time'], $break_data['out_time']);                    }                    $over_all_break = $this->sum_multi_time($over_break_time);                    $over_total_atten_time = $this->time_difference($total_atten_time, $over_all_break);                    // $users[$key]['over_break_time1']=$break_details;                    // $users[$key]['over_break_time2']=$over_break_time;                    $users[$key]['atten_hours'] = $this->explode_time($total_atten_time);                    $users[$key]['over_break_time'] = $this->explode_time($over_all_break);                    $users[$key]['total_duration'] = $this->explode_time($over_total_atten_time);                } else {                    $users[$key]['atten_hours'] = $this->explode_time($total_atten_time);                    $users[$key]['over_break_time'] = "-";                    $users[$key]['total_duration'] = $this->explode_time($total_atten_time);                }                $over_all_duration = "00:00:00";                if ($ot != "-") {                    $over_all_duration = $this->sum_the_time($ot, $over_total_atten_time);                    $users[$key]['over_all_duration'] = $this->explode_time($over_all_duration);                }                $check_attend = $this->check_attendance($users[$key]['in'], $over_total_atten_time);                $users[$key]['status'] = $check_attend;            }            $early_going_users[$date_data]['users'] = $users;            if (count($users) == 0) {                $this->db->where("holiday_from <=", $date_data);                $this->db->where("holiday_to >=", $date_data);                $holidays = $this->db->get('public_holidays')->result_array();                if (count($holidays) > 0) {                    $early_going_users[$date_data]['holidays'] = $holidays[0]['reason'] . "  Holiday";                } else {                    $week_off_holiday = $this->week_end_holiday($date_data);                    $early_going_users[$date_data]['holidays'] = $week_off_holiday;                }            }        }        return $early_going_users;    }    function get_office_time() {        $data = [];        $this->db->where('type', 'regular');        $this->db->where('shift_id', '1');        $office_time = $this->db->get('shift_split')->result_array();        $this->db->where('type', 'lunch');        $this->db->where('shift_id', '1');        $lunch_time = $this->db->get('shift_split')->result_array();        $data['in_time'] = "09:00:00";        $data['out_time'] = "18:00:00";        $data['lunch_time'] = "01:00:00";        $data['over_time_hours'] = "00:00:00";        $total_ofc_hours = "00:00:00";        if (count($office_time) > 0) {            $total_ofc_hours = $this->time_difference($office_time[0]['from_time'], $office_time[0]['to_time']);        }        $this->db->where('type', 'break');        $this->db->or_where('type', 'lunch');        $this->db->where('shift_id', '1');        $office_break_details = $this->db->get('shift_split')->result_array();        $over_all_break = "";        $over_break_time = "";        $ofc_time = "08:00:00";        if ($office_break_details != "") {            foreach ($office_break_details as $key1 => $break_data) {                $over_break_time[] = $this->time_difference($break_data['from_time'], $break_data['to_time']);            }            $over_all_break = $this->sum_multi_time($over_break_time);            $ofc_time = $this->time_difference($over_all_break, $total_ofc_hours);        } else {            $ofc_time = $total_ofc_hours;        }        $data['ofc_time'] = $ofc_time;        if (!empty($office_time)) {            $data['in_time'] = $office_time[0]['from_time'];            $data['out_time'] = $office_time[0]['to_time'];        }        if (!empty($lunch_time)) {            $data['lunch_time'] = $lunch_time[0]['from_time'];        }        $this->db->where('key', 'min_ot_hours');        $over_time = $this->db->get('options')->result_array();        $data['over_time'] = "00:00:00";        if (count($over_time) > 0) {            $over_time_hours = $over_time[0]['value'];            $data['over_time_hours'] = $over_time_hours . ":00";            $data['over_time'] = $over_time_hours;            $data['over_time'] = $this->sum_the_time($data['out_time'], $data['over_time']);        }        $data['late_coming_threshold'] = $data['in_time'];        $data['early_going_threshold'] = $data['out_time'];        $this->db->where('key', 'late_coming_threshold_value');        $late_coming_time = $this->db->get('options')->result_array();        if (!empty($late_coming_time))            $data['late_coming_threshold'] = $this->sum_the_time($data['in_time'], $late_coming_time[0]['value'] . ":00");        $this->db->where('key', 'early_going_threshold_value');        $early_going_time = $this->db->get('options')->result_array();        if ($early_going_time)            $data['early_going_threshold'] = $this->time_difference($data['out_time'], $early_going_time[0]['value'] . ":00");        return $data;    }    function get_daily_reports_users_list($dates) {        $daily_report_users = [];        $office_time_details = $this->get_office_time();        //office_general_time_detils_start        $over_time = $office_time_details['over_time'];        $over_hours = $office_time_details['over_time_hours'];        $office_late_time = $office_time_details['late_coming_threshold'];        $office_early_time = $office_time_details['early_going_threshold'];        $lunch_time = $office_time_details['lunch_time'];        $ofc_time_hrs = $office_time_details['ofc_time'];        $office_work_hours = "08:00:00";        $office_half_day_work_hours = "04:00:00";        // $after_lunch_time="13:00:00";        $explode_time = explode(':', $office_work_hours);        $time_hr = $explode_time[0];        $time_min = $explode_time[1];        $half_time = round($time_hr . "." . $time_min) / 2;        $office_half_day_work_hours = "0" . $half_time . ":00:00";        $office_work_hours = $ofc_time_hrs;        $after_lunch_time = $lunch_time;        //office_general_time_detils_end        foreach ($dates as $date_data) {            $users = [];            $this->db->where('options.key', 'attendance_threshold');            $threshold_value = $this->db->get('options')->result_array();            $threshold = 0;            if ($threshold_value != "") {                $threshold = $threshold_value[0]['value'];            }            $get_office_time = $this->get_office_time();            $work_start = $get_office_time['in_time'];            $work_end = $get_office_time['out_time'];            //$over_time="20:00:00";//            if ($threshold != "") {//                $work_start = strtotime($work_start);//                $work_start = date("H:i:s", strtotime('+' . $threshold . ' minutes', $work_start));//            }            $this->db->select('users.id,users.employee_id,users.username');            $this->db->where('users.status', 1);            $users = $this->db->get('users')->result_array();            $explode_date = explode('-', $date_data);            $month = $explode_date[1];            $year = $explode_date[0];            $table = 'devicelogs_' . $month . '_' . $year;            if (!empty($users)) {                foreach ($users as $key => $user_list) {                    //shift                    $this->load->database('default', TRUE);                    $this->db = $this->load->database('default', true);                    $this->db->where('user_shift.user_id', $user_list['id']);                    $this->db->join('shift', 'shift.id=user_shift.shift_id', 'left');                    $shift_details = $this->db->get('user_shift')->result_array();                    $users[$key]['shift_name'] = '-';                    if (!empty($shift_details)) {                        $users[$key]['shift_name'] = $shift_details[0]['name'];                    }                    //atten in & out                    $this->db->where('attendance.user_id', $user_list['id']);                    $this->db->where('DATE(attendance.created)=', $date_data);                    $attendance_details = $this->db->get('attendance')->result_array();                    $attendance_id = 0;                    $break_time = "";                    $users[$key]['ot'] = "00:00";                    $users[$key]['late_by'] = "00:00";                    $users[$key]['early_going'] = "00:00";                    $users[$key]['shift_in'] = $this->explode_time($work_start);                    $users[$key]['shift_out'] = $this->explode_time($work_end);                    $users[$key]['full_logs'] = "";                    if (!empty($attendance_details)) {                        $users[$key]['in'] = $this->explode_time($attendance_details[0]['in']);                        $users[$key]['out'] = $this->explode_time($attendance_details[0]['out']);                        $attendance_id = $attendance_details[0]['id'];                        //punch records                        $this->db->select('UserId,LogDate,Direction');                        $this->db->where('DATE(' . $table . '.LogDate)', $date_data);                        $this->db->where('UserId', $user_list['id']);                        $device_log = $this->db->get($table)->result_array();                        $full_logs = "";                        $log_details = "";                        $log_details_data = "";                        if ($device_log != "") {                            foreach ($device_log as $d_key => $logs) {                                $keyss = $d_key + 1;                                $direction = $logs['Direction'];                                $log_time_explode = explode(' ', $logs['LogDate']);                                $time = $this->explode_time($log_time_explode[1]);                                $log_details_data = $time . ":" . $direction;                                if ($keyss % 5 == "0" && $keyss != 0) {                                    $log_details_data = $time . ":" . $direction . '<br>';                                }                                $log_details[] = $log_details_data;                            }                            $full_logs = implode(',', $log_details);                        }                        $users[$key]['full_logs_details'] = $device_log;                        $users[$key]['full_logs'] = $full_logs;                        //Ot                        $ot = "00:00:00";                        if ($attendance_details[0]['out'] > $over_time) {                            $ot = $this->time_difference($over_time, $attendance_details[0]['out']);                            $ot = $this->sum_the_time($ot, $over_hours);                            $users[$key]['ot'] = $this->explode_time($ot);                        }                        //late_by                        if ($attendance_details[0]['in'] > $office_late_time) {                            $late_by = $this->time_difference($office_late_time, $attendance_details[0]['in']);                            $users[$key]['late_by'] = $this->explode_time($late_by);                        }                        //early_going                        if ($attendance_details[0]['out'] != "") {                            if ($attendance_details[0]['out'] < $office_early_time) {                                $early_going = $this->time_difference($office_early_time, $attendance_details[0]['out']);                                $users[$key]['early_going'] = $this->explode_time($early_going);                            }                        }                        $total_atten_time = "";                        //total_duration                        $total_atten_time = $this->time_difference($attendance_details[0]['in'], $attendance_details[0]['out']);                        $this->load->database('default', TRUE);                        $this->db = $this->load->database('default', true);                        $this->db->where('break_table.attendance_id', $attendance_id);                        if ($attendance_details[0]['out'] != "")                            $this->db->where('break_table.in_time !=', $attendance_details[0]['out']);                        $break_details = $this->db->get('break_table')->result_array();                        $over_all_break = "";                        $over_break_time = "";                        if ($break_details != "") {                            foreach ($break_details as $key1 => $break_data) {                                $over_break_time[] = $this->time_difference($break_data['in_time'], $break_data['out_time']);                            }                            $over_all_break = $this->sum_multi_time($over_break_time);                            $over_total_atten_time = $this->time_difference($total_atten_time, $over_all_break);                            // $users[$key]['over_break_time1']=$break_details;                            // $users[$key]['over_break_time2']=$over_break_time;                            $users[$key]['atten_hours'] = $this->explode_time($total_atten_time);                            $users[$key]['over_break_time'] = $this->explode_time($over_all_break);                            $users[$key]['total_duration'] = $this->explode_time($over_total_atten_time);                        } else {                            $users[$key]['atten_hours'] = $this->explode_time($total_atten_time);                            $users[$key]['over_break_time'] = "-";                            $users[$key]['total_duration'] = $this->explode_time($total_atten_time);                        }                        $over_all_duration = "00:00:00";                        if ($ot != "-") {                            $over_all_duration = $this->sum_the_time($ot, $over_total_atten_time);                            $users[$key]['over_all_duration'] = $this->explode_time($over_all_duration);                        }                        $check_attend = $this->check_attendance($attendance_details[0]['in'], $over_total_atten_time);                        $users[$key]['status'] = $check_attend;                    } else {                        $users[$key]['atten_hours'] = "-";                        $users[$key]['over_break_time'] = "-";                        $users[$key]['total_duration'] = "00:00";                        $users[$key]['over_all_duration'] = "00:00";                        $this->db->where("holiday_from <=", $date_data);                        $this->db->where("holiday_to >=", $date_data);                        $holidays = $this->db->get('public_holidays')->result_array();                        if (count($holidays) > 0) {                            $users[$key]['status'] = "PH";                            $users[$key]['in'] = '-';                            $users[$key]['out'] = '-';                        } else {                            $week_off_holiday = $this->week_off_holiday($date_data);                            $users[$key]['status'] = $week_off_holiday;                            if ($users[$key]['status'] == "H") {                                $users[$key]['in'] = '-';                                $users[$key]['out'] = '-';                            }if ($users[$key]['status'] == "A") {                                $users[$key]['in'] = 'a';                                $users[$key]['out'] = 'a';                            } else {                                $users[$key]['in'] = '-';                                $users[$key]['out'] = '-';                            }                        }                    }                }            }            $daily_report_users[$date_data]['users'] = $users;            $holiday_exists = 0;            $this->db->select('attendance.id');            $this->db->where('DATE(attendance.created)=', $date_data);            $attendance_details = $this->db->get('attendance')->result_array();            if (count($attendance_details) == 0) {                $this->db->where("holiday_from <=", $date_data);                $this->db->where("holiday_to >=", $date_data);                $holidays = $this->db->get('public_holidays')->result_array();                $daily_report_users[$date_data]['holidays'] = $holidays;            }        }        // echo "<pre>";        //print_r($daily_report_users);        // exit;        return $daily_report_users;    }    function find_week($date) {        $datee = strtotime(str_replace("/", "-", $date));        $firstOfMonth = strtotime(date("Y-m-01", $datee));        return intval(date("W", $datee)) - intval(date("W", $firstOfMonth)) + 1;    }    function get_all_monthly_reports($start_date, $end_date) {        $monthly_reports = [];        $office_time_details = $this->get_office_time();        $lunch_time = $office_time_details['lunch_time'];        $ofc_time_hrs = $office_time_details['ofc_time'];        $office_work_hours = "08:00:00";        $office_half_day_work_hours = "04:00:00";        // $after_lunch_time="13:00:00";        $explode_time = explode(':', $office_work_hours);        $time_hr = $explode_time[0];        $time_min = $explode_time[1];        $half_time = round($time_hr . "." . $time_min) / 2;        $office_half_day_work_hours = "0" . $half_time . ":00:00";        $office_work_hours = $ofc_time_hrs;        $after_lunch_time = $lunch_time;        $this->db->select('users.id,users.employee_id,users.username');        $this->db->where('users.status', 1);        $monthly_reports = $this->db->get('users')->result_array();        if (count($monthly_reports) > 0) {            foreach ($monthly_reports as $key => $user_data) {                $this->db->where('user_id', $user_data['id']);                $user_detail = $this->db->get('user_department')->result_array();                if (!empty($user_detail)) {                    $this->db->where('id', $user_detail[0]['department']);                    $department_details = $this->db->get('department')->result_array();                    $monthly_reports[$key]['department'] = $department_details[0]['name'];                    $this->db->where('id', $user_detail[0]['designation']);                    $designation_details = $this->db->get('designation')->result_array();                    $monthly_reports[$key]['designation'] = $designation_details[0]['name'];                } else {                    $monthly_reports[$key]['department'] = "";                    $monthly_reports[$key]['designation'] = "";                }                $s_date = date('d-m-Y', strtotime($start_date));                $std_dt = $end_date . " 00:00:00";                $exclude_date = new DateTime($std_dt . ' +1 day');                $e_date = $exclude_date->format('d-m-Y');                $start = new DateTime($s_date . ' 00:00:00');                $end = new DateTime($e_date . ' 00:00:00');                $interval = new DateInterval('P1D');                $period = new DatePeriod($start, $interval, $end);                $days_array = "";                foreach ($period as $date) {                    $days_array[] = $date->format('d-m-Y');                }                $current_day = "";                for ($d = 0; $d <= count($days_array) - 1; $d++) {                    $current_day[] = explode("-", $days_array[$d]);                    $day_array[] = $current_day[0];                }                $periods = "";                foreach ($current_day as $key1 => $dates) {                    $periods[$key1]['date'] = $dates[0];                    $periods[$key1]['month'] = $dates[1];                    $periods[$key1]['year'] = $dates[2];                    $check_date = $dates[2] . "-" . $dates[1] . "-" . $dates[0];                    $current_date = date('Y-m-d H:i');                    $explode_current_date = explode(' ', $current_date);                    $currenct_time = $explode_current_date[1];                    $explode_currenct_time = explode(':', $currenct_time);                    $currenct_hr = $explode_currenct_time[0];                    $currenct_mins = $explode_currenct_time[1];                    $check_date_name = $dates[2] . $dates[1] . $dates[0] . $currenct_hr . $currenct_mins;                    $datetime = DateTime::createFromFormat('YmdHi', $check_date_name);                    $day_name = $datetime->format('D');                    $periods[$key1]['day_name'] = $day_name;                    $this->db->where('user_id', $user_data['id']);                    $this->db->where('DATE(attendance.created)=', $check_date);                    $attendance_details = $this->db->get('attendance')->result_array();                    if (count($attendance_details) > 0) {                        $atten_time_over = $this->time_difference($attendance_details[0]['out'], $attendance_details[0]['in']);                        $periods[$key1]['atten_in'] = $attendance_details[0]['in'];                        $periods[$key1]['atten_out'] = $attendance_details[0]['out'];                        $this->db->where('attendance_id', $attendance_details[0]['id']);                        //$this->db->where('out_time <',$attendance_details[0]['out']);                        $check_break = $this->db->get('break_table')->result_array();                        $over_all_break = "00:00:00";                        $over_break_time = "";                        if (!empty($check_break)) {                            foreach ($check_break as $keyb => $break_data) {                                $over_break_time[] = $this->time_difference($break_data['out_time'], $break_data['in_time']);                            }                            $over_all_break = $this->sum_multi_time($over_break_time);                            if ($atten_time_over > $over_all_break)                                $over_all_atten_over_time = $this->time_difference($over_all_break, $atten_time_over);                            else                                $over_all_atten_over_time = $this->time_difference($atten_time_over, $atten_time_over);                        }else {                            $over_all_atten_over_time = $atten_time_over;                        }                        $periods[$key1]['over_all_attenance'] = $atten_time_over;                        $periods[$key1]['overall_break'] = $over_all_break;                        // $periods[$key1]['break_details']=$check_break;                        $periods[$key1]['work_time'] = $over_all_atten_over_time;                        $check_attend = $this->check_attendance($attendance_details[0]['in'], $over_all_atten_over_time);                        $periods[$key1]['month_attenance'] = $check_attend;                    } else {                        $this->db->where("holiday_from <=", $check_date);                        $this->db->where("holiday_to >=", $check_date);                        $holidays = $this->db->get('public_holidays')->result_array();                        if (count($holidays) > 0) {                            $periods[$key1]['month_attenance'] = "PH";                        } else {                            $week_off_holiday = $this->week_off_holiday($check_date);                            $periods[$key1]['month_attenance'] = $week_off_holiday;//                            $this->db->select('id');//                            $this->db->where('DATE(attendance.created)=', $check_date);//                            $check_any_user_came = $this->db->get('attendance')->result_array();//                            $user_came_count = count($check_any_user_came);//                            if ($user_came_count > 0) {//                                if ($user_came_count == 0 || $user_came_count == 1 || $user_came_count == 2) {//                                    $periods[$key1]['month_attenance'] = "H";//                                } else {//                                    $periods[$key1]['month_attenance'] = "A";//                                }//                            } else {//                                $periods[$key1]['month_attenance'] = "-";//                            }                        }                    }                }                $monthly_reports[$key]['monthly_works'] = $periods;            }            return $monthly_reports;        }    }    function get_over_time_reports($start_date, $end_date) {        $over_reports = [];        $office_time_details = $this->get_office_time();        $over_time = $office_time_details['over_time'];        $over_hours = $office_time_details['over_time_hours'];        $this->db->select('users.id,users.employee_id,users.username');        $this->db->where('users.status', 1);        $over_reports = $this->db->get('users')->result_array();        if (!empty($over_reports)) {            foreach ($over_reports as $key => $user_list) {                $this->db->where('user_id', $user_list['id']);                $user_detail = $this->db->get('user_department')->result_array();                if (!empty($user_detail)) {                    $this->db->where('id', $user_detail[0]['department']);                    $department_details = $this->db->get('department')->result_array();                    $over_reports[$key]['department'] = $department_details[0]['name'];                    $this->db->where('id', $user_detail[0]['designation']);                    $designation_details = $this->db->get('designation')->result_array();                    $over_reports[$key]['designation'] = $designation_details[0]['name'];                } else {                    $over_reports[$key]['department'] = "";                    $over_reports[$key]['designation'] = "";                }                $s_date = date('d-m-Y', strtotime($start_date));                $std_dt = $end_date . " 00:00:00";                $exclude_date = new DateTime($std_dt . ' +1 day');                $e_date = $exclude_date->format('d-m-Y');                $start = new DateTime($s_date . ' 00:00:00');                $end = new DateTime($e_date . ' 00:00:00');                $interval = new DateInterval('P1D');                $period = new DatePeriod($start, $interval, $end);                $days_array = "";                foreach ($period as $date) {                    $days_array[] = $date->format('d-m-Y');                }                $current_day = "";                for ($d = 0; $d <= count($days_array) - 1; $d++) {                    $current_day[] = explode("-", $days_array[$d]);                    $day_array[] = $current_day[0];                }                $over_time_add = "";                $periods = "";                foreach ($current_day as $key1 => $dates) {                    $periods[$key1]['date'] = $dates[0];                    $periods[$key1]['month'] = $dates[1];                    $periods[$key1]['year'] = $dates[2];                    $check_date = $dates[2] . "-" . $dates[1] . "-" . $dates[0];                    $this->db->where('user_id', $user_list['id']);                    $this->db->where('DATE(attendance.created)=', $check_date);                    $this->db->where('out >', $over_time);                    $attendance_details = $this->db->get('attendance')->result_array();                    if (!empty($attendance_details)) {                        $atten_time_over = $this->time_difference($attendance_details[0]['out'], $over_time);                        $this->db->where('attendance_id', $atten_time_over[0]['id']);                        $this->db->where('in_time >', $over_time);                        $this->db->where('out_time <', $attendance_details[0]['out']);                        $check_break = $this->db->get('break_table')->result_array();                        $over_all_break = "00:00:00";                        if (!empty($check_break)) {                            foreach ($check_break as $keyb => $break_data) {                                $over_break_time[] = $this->time_difference($break_data['in_time'], $break_data['out_time']);                            }                            $over_all_break = $this->sum_multi_time($over_break_time);                            $over_all_atten_over_time = $this->time_difference($atten_time_over, $over_all_break);                        } else {                            $over_all_atten_over_time = $atten_time_over;                        }                        $over_all_atten_over_time = $this->sum_the_time($over_all_atten_over_time, $over_hours);                        $over_time_add[] = $over_all_atten_over_time;                        // $periods[$key1]['over_time']=$this->sum_the_time($over_all_atten_over_time,$over_time);                        //$periods[$key1]['over_times']=$over_time;                        $periods[$key1]['over_time'] = $this->round_hours($this->explode_time($over_all_atten_over_time));                        //$this->sum_the_time($overttime,$over_time)                    } else {                        $periods[$key1]['over_time'] = "-";                    }                }                $over_reports[$key]['over_time_add'] = $this->round_hours($this->explode_time($this->sum_multi_time($over_time_add)));                $over_reports[$key]['over_time_works'] = $periods;            }        }        return $over_reports;    }    /* function get_office_time()      {      $this->db->where('type','regular');      $this->db->where('shift_id','1');      $this->db->get('shift_split')->result_array();      } */    function round_hours($time) {        $explode_time = explode(':', $time);        $hours = round($explode_time[0]);        if ($explode_time[1] == "00") {            $mins = "";        } else {            $mins = $explode_time[1];        }        $time = $hours . "." . $mins;        if ($hours == 0 && $mins == "")            $time = 0;        //if($time="0.")        //$time=0;        return $time;    }    function sum_multi_time($times) {        $seconds = 0;        if ($times) {            foreach ($times as $time) {                list($hour, $minute, $second) = explode(':', $time);                $seconds += $hour * 3600;                $seconds += $minute * 60;                $seconds += $second;            }        }        $hours = floor($seconds / 3600);        $seconds -= $hours * 3600;        $minutes = floor($seconds / 60);        $seconds -= $minutes * 60;        //  return "{$hours}:{$minutes}:{$seconds}";        return sprintf('%02d:%02d:%02d', $hours, $minutes, $seconds); // Thanks to Patrick    }    function time_difference($in_time, $out_time) {        $time1 = new DateTime($in_time);        $time2 = new DateTime($out_time);        $inter = $time2->diff($time1);        $hours = $inter->h;        if ($inter->h < 10) {            $hours = "0" . $inter->h;        }        $mins = $inter->i;        if ($inter->i < 10) {            $mins = "0" . $inter->i;        }        $sec = $inter->s;        if ($inter->s < 10) {            $sec = "0" . $inter->s;        }        return $hours . ":" . $mins . ":" . $sec;    }    function sum_the_time($time1, $time2) {        $times = array($time1, $time2);        $seconds = 0;        foreach ($times as $time) {            list($hour, $minute, $second) = explode(':', $time);            $seconds += $hour * 3600;            $seconds += $minute * 60;            $seconds += $second;        }        $hours = floor($seconds / 3600);        $seconds -= $hours * 3600;        $minutes = floor($seconds / 60);        $seconds -= $minutes * 60;        // return "{$hours}:{$minutes}:{$seconds}";        return sprintf('%02d:%02d:%02d', $hours, $minutes, $seconds); // Thanks to Patrick    }    function explode_time($time) {        $explode_time = explode(':', $time);        $time = $explode_time[0] . ":" . $explode_time[1];        return $time;    }    function chk_date_exits($check_date) {        $data = array();        $date = date("Y-m-d", strtotime($check_date));        $timestamp = strtotime($check_date);        $weekday = date("l", $timestamp);        $this->db->where("holiday_from <=", $date);        $this->db->where("holiday_to >=", $date);        $holidays = $this->db->get('public_holidays');        if ($holidays->num_rows() > 0) {            $data['month_attendance'] = "PH";            return 'PH';        } else {            $number_week = $this->find_week($date);            $this->db->where('key', 'Week_end_holidays');            $check_week_holidays = $this->db->get('options')->result_array();            $week_holidays = "";            if ($check_week_holidays != "") {                $week_holidays = explode(',', $check_week_holidays[0]['value']);                if (in_array($number_week, $week_holidays) && $weekday == "Saturday" || $weekday == "Sunday") {                    $data['month_attendance'] = "H";                    return 'H';                } else {                    $this->db->where('DATE(attendance.created)=', $date);                    $attendance_details = $this->db->get('attendance')->result_array();                    if (count($attendance_details) > 1) {                        return 'A';                    } else {                        return '-';                    }                }            } else {                $data['month_attendance'] = "-";                return '-';            }        }//        echo '<pre>';//        print_r($weekday);//        exit;    }    function public_holiday($check_date) {        $this->db->where("holiday_from <=", $check_date);        $this->db->where("holiday_to >=", $check_date);        $holidays = $this->db->get('public_holidays');        if ($holidays->num_rows() > 0) {            $data['month_attendance'] = "PH";            return 'PH';        } else {            $data['month_attendance'] = "-";            return '-';        }    }    function week_off_holiday($check_date) {        $timestamp = strtotime($check_date);        $weekday = date("l", $timestamp);        $number_week = $this->find_week($check_date);        $this->db->where('key', 'Week_end_holidays');        $check_week_holidays = $this->db->get('options')->result_array();        $week_holidays = "";        if ($check_week_holidays != "") {            $week_holidays = explode(',', $check_week_holidays[0]['value']);            if (in_array($number_week, $week_holidays) && $weekday == "Saturday" || $weekday == "Sunday") {                $data['month_attendance'] = "H";                return 'H';            } else {                $this->db->where('DATE(attendance.created)=', $check_date);                $attendance_details = $this->db->get('attendance')->result_array();                if (count($attendance_details) == 0 || count($attendance_details) == 1) {                    $data['month_attendance'] = "-";                    return '-';                } else {                    $data['month_attendance'] = "A";                    return 'A';                }            }        } else {            $data['month_attendance'] = "-";            return '-';        }    }    function week_end_holiday($check_date) {        $timestamp = strtotime($check_date);        $weekday = date("l", $timestamp);        $number_week = $this->find_week($check_date);        $this->db->where('key', 'Week_end_holidays');        $check_week_holidays = $this->db->get('options')->result_array();        $week_holidays = "";        if ($check_week_holidays != "") {            $week_holidays = explode(',', $check_week_holidays[0]['value']);            if (in_array($number_week, $week_holidays) && $weekday == "Saturday" || $weekday == "Sunday") {                $data['reason'] = "H";                return 'Week Off Holiday';            }        } else {            $data['reason'] = "-";            return '-';        }    }    function check_attendance($in_time, $over_all_atten_over_time) {        $office_time_details = $this->get_office_time();        $lunch_time = $office_time_details['lunch_time'];        $ofc_time_hrs = $office_time_details['ofc_time'];        $office_work_hours = "08:00:00";        $office_half_day_work_hours = "04:00:00";        // $after_lunch_time="13:00:00";        $explode_time = explode(':', $office_work_hours);        $time_hr = $explode_time[0];        $time_min = $explode_time[1];        $half_time = round($time_hr . "." . $time_min) / 2;        $office_half_day_work_hours = "0" . $half_time . ":00:00";        $office_work_hours = $ofc_time_hrs;        $after_lunch_time = $lunch_time;        if ($in_time >= $after_lunch_time) {            $data['month_attenance'] = "1/2A";            return '1/2A';        } else {            if ($over_all_atten_over_time < $office_half_day_work_hours) {                $data['month_attenance'] = "LOP";                return 'LOP';            }            if ($over_all_atten_over_time >= $office_half_day_work_hours && $over_all_atten_over_time < $office_work_hours) {                $data['month_attenance'] = "1/2LOP";                return '1/2LOP';            }            if ($over_all_atten_over_time >= $office_work_hours) {                $data['month_attenance'] = "P";                return 'P';            }        }    }    function get_absentees_users_list($date_data) {        $users = [];        $this->db->select('users.id,users.employee_id,users.username');        $this->db->where('users.status', 1);        $this->db->group_by('users.id');        $users = $this->db->get('users')->result_array();//        echo '<pre>';//        print_r($users);//        exit;        if (!empty($users)) {            foreach ($users as $key => $user_list) {                //atten in & out                $this->db->where('attendance.user_id', $user_list['id']);                $this->db->where('DATE(attendance.created)=', $date_data);                $attendance_details = $this->db->get('attendance')->result_array();                if (empty($attendance_details[0]['in'])) {                    $this->db->where("holiday_from <=", $date_data);                    $this->db->where("holiday_to >=", $date_data);                    $holidays = $this->db->get('public_holidays')->result_array();                    if (count($holidays) > 0) {                        $users[$key]['status'] = "PH";                    } else {                        $timestamp = strtotime($date_data);                        $weekday = date("l", $timestamp);                        $number_week = $this->find_week($date_data);                        $this->db->where('key', 'Week_end_holidays');                        $check_week_holidays = $this->db->get('options')->result_array();                        $week_holidays = "";                        if ($check_week_holidays != "") {                            $week_holidays = explode(',', $check_week_holidays[0]['value']);                            if (in_array($number_week, $week_holidays) && $weekday == "Saturday" || $weekday == "Sunday") {                                $users[$key]['status'] = "H";                            } else {                                $users[$key]['status'] = "A";                            }                        } else {                            $users[$key]['status'] = "-";                        }                    }                }            }        }        return $users;    }}